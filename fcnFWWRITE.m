% function [] = fcnFWWRITE(FW, Aircraft)

fp = fopen('input.txt','wt');

%% Writing header
fprintf(fp,['Input file for FreeWake 2014 and 2015beta\n' ... 
            'Format will not work with older versions\n' ...
            'Input file generated by Travis''s m-file, in m/N/sec\n' ...
            'Please note that the program uses equal, number and ' ...
            ': signs as special recognizers!\n' ...
            'The results are written to the sub-directory '...
            'output''\n\n'] ...
        );
%% Writing header flags
fprintf(fp,['Relaxed wake (yes 1, no 0):\t\trelax =\t\t%d\n' ...
            'Steady (1) or unsteady (2):\t\taerodynamics =\t%d\n' ...
            'Symmetrical geometry (yes 1, no 0):\tsym =\t\t%d\n' ...
            'Longitudinal trim (yes 1, no 0):\ttrim =\t\t%d' ... 
            '\t(yes means m has to be 1)\n\n'], flagRELAX, ...
            flagSTEADY, int64(any(vecSYM)), 0);
%% Writing time step information 
fprintf(fp,['Max. number of time steps:\tmaxtime =\t%d\n' ...
            'Width of each time step (sec):\tdeltime =\t%f\n' ...
            'Convergence delta-span effic.:\tdeltae =\t%f\t(0 if only' ...
            'timestepping)\n\n'], ...
            valMAXTIME, valDELTIME, valDELTAE);
%% Writing flow conditions
fprintf(fp,['Freestream velocity (leave value 1):\tUinf =\t\t%0.1f\n' ...
            'AOA beginning, end, step size [deg]:\talpha'...
            '=\t\t%0.1f %0.1f %0.1f\n' ...
            'Sideslip angle [deg]:\t\t\tbeta =\t\t%0.1f\n' ...
            'Density:\t\t\t\tdensity =\t%0.4f\n' ...
            'Kinematic viscosity:\t\t\tnu =\t\t%e\n\n'], 1, ...
            seqALPHA(1), seqALPHA(end), (seqALPHA(end)-seqALPHA(1)+1)/(length(seqALPHA)), 0, ...
            valDENSITY, valKINV);
%% Writing aircraft reference values

fprintf(fp,['Reference area:\t\t\tS =\t%0.9f\n' ...
            'Reference span:\t\t\tb =\t%0.9f\n' ...
            'Mean aerodynamic chord:\t\tcmac =\t%0.9f\n' ...
            'Aircraft weight (N):\t\tW =\t%0.9f\n' ...
            'CG location (x y z):\t\tcg =\t%0.9f %0.9f %0.9f\n' ...
            'CMo of wing:\t\t\tCMo =\t%0.9f\n\n'
            ],valAREA, valSPAN, valCMAC, valWEIGHT, ...
            0, 0, 0, -0.1);
%% Writing pane/wing/lifting line information
fprintf(fp,['No. of wings (max. 5):\t\twings =\t\t%d\n' ...
            'No. of panels:\t\t\tpanels =\t%d\n' ...
            'No. of chordwise lifting lines: m =\t\t%d\n' ...
            'No. of airfoils (max. 15):\tairfoils =\t%d\n\n' ...
            ], wings, valPANELS, min(vecM), max(vecAIRFOIL));
%% Writing filler information
fprintf(fp,['Panel boundary conditions:\n' ...
            '\tSymmetry line - \t10\n\tBetween panels - \t220\n\t' ...
            'Free end - \t\t100\n\n' ...
            'Defines leading edge of wing, all measured in metres:\n\n']);
%% Writing wing geometry
for i = 1:valPANELS
fprintf(fp,['Panel #:%d. Number of spanwise elements (n) = %d. ' ...
           'Airfoil number = %d\nNeighbouring panels (0 for none)' ...
           ' left: %d right: %d\nxleft\tyleft\tzleft\tchord' ...
           '\tepsilon\tBound.Cond.\n' ...
           '%0.15f\t%0.15f\t%0.15f\t%0.15f\t%0.15f\t%d\n' ...
           'xright\tyright\tzright\tchord\tepsilon\tBound.Cond.\n' ...
           '%0.15f\t%0.15f\t%0.15f\t%0.15f\t%0.15f\t%d\n\n'...
           ], i, vecN(i), vecAIRFOIL(i), 0, ...
           0, ...
           matGEOM(1,1,i), ... 
           matGEOM(1,2,i), matGEOM(1,3,i), ...
           matGEOM(1,4,i), matGEOM(1,5,i), ...
           220, ...
           matGEOM(2,1,i), ... 
           matGEOM(2,2,i), matGEOM(2,3,i), ...
           matGEOM(2,4,i), matGEOM(2,5,i), ...
           220);
end
%% Writing vertical tail information

fprintf(fp,['%%<- special identifier\nVertical tail information:\n' ...
            'Number of panels (max 5) = %d\n' ...
            'no.\tchord\tarea\tairfoil\n'], valVSPANELS);

for j = 1:valVSPANELS
fprintf(fp,'%d\t%0.3f\t%0.4f\t%d\n', matVSGEOM(j,:));
end
%% Writing fuselage information
fprintf(fp,['\nFuselage information:\nNumber of sections (max 20) =\t'...
            '%d\n'...
            'Width of each section =\t\t%0.3f\n' ...
            'Panel where transition occurs =\t%d\n' ...
            'No.\tDiamter\n'], valFPANELS, valFPWIDTH, valFTURB);

for k = 1:valFPANELS
    fprintf(fp,'%d\t%0.3f\n', matFGEOM(k,1), matFGEOM(k,2));
end

fprintf(fp,'\nInterference drag = %0.1f%%', valINTERF);
%%

fprintf(fp,'\n##############');
fclose(fp);
fclose all;
